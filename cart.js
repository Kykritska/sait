document.addEventListener('DOMContentLoaded', () => {
    const cartItemsContainer = document.getElementById('cart-items');
    // const cartItemCountSpan = document.getElementById('cart-item-count'); // Old sidebar count
    let cart = JSON.parse(localStorage.getItem('cart')) || [];

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –≤ —Ö–µ–¥–µ—Ä–µ
    window.updateCartCountDisplay = function() {
        const currentCart = JSON.parse(localStorage.getItem('cart')) || [];
        let totalItems = 0;
        currentCart.forEach(item => {
            totalItems += item.quantity || 0;
        });
        const cartItemCountSpanHeader = document.getElementById('cart-item-count-header');
        if (cartItemCountSpanHeader) {
            cartItemCountSpanHeader.textContent = totalItems;
            cartItemCountSpanHeader.style.display = totalItems > 0 ? 'inline-block' : 'none';
        }
        
        // If there was an old sidebar counter, we might want to update it too or remove its logic
        // const oldCartItemCountSpan = document.getElementById('cart-item-count');
        // if (oldCartItemCountSpan) { /* ... update or hide ... */ }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è VIP –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º
    function displayVipOffer(total) {
        const vipOfferSection = document.getElementById('vip-offer-section');
        if (!vipOfferSection) return;

        const isVip = localStorage.getItem('isVIP') === 'true';
        const vipThreshold = 800000;
        const vipDiscountPercent = localStorage.getItem('vipDiscountPercent') || '30';

        if (isVip) {
            vipOfferSection.innerHTML = `
                <p style="color: green; font-weight: bold;">‚≠ê VIP-–∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞! –í–∞—à–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞ ${vipDiscountPercent}% —É–∂–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è.</p>
            `;
            vipOfferSection.style.display = 'block';
        } else if (total >= vipThreshold) {
            vipOfferSection.innerHTML = `
                <h4>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h4>
                <p>–í–∞—à–∞ —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ (${total.toLocaleString('ru-RU')}‚ÇΩ) –¥–æ—Å—Ç–∏–≥–ª–∞ ${vipThreshold.toLocaleString('ru-RU')}‚ÇΩ.</p>
                <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã <strong>–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å VIP-–∫–∞—Ä—Ç—É</strong> –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å–∫–∏–¥–∫—É <strong>${vipDiscountPercent}%</strong> –Ω–∞ –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã!</p>
                <button id="activate-vip-btn" class="btn btn-success" style="margin-top: 10px;">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å VIP-–∫–∞—Ä—Ç—É (—Å–∫–∏–¥–∫–∞ ${vipDiscountPercent}%)</button>
            `;
            vipOfferSection.style.display = 'block';

            const activateVipBtn = document.getElementById('activate-vip-btn');
            if (activateVipBtn) {
                activateVipBtn.addEventListener('click', () => {
                    localStorage.setItem('isVIP', 'true');
                    localStorage.setItem('vipDiscountPercent', vipDiscountPercent);
                    vipOfferSection.innerHTML = `
                        <p style="color: green; font-weight: bold;">‚úÖ VIP-–∫–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</p>
                        <p>–í–∞—à–∞ —Å–∫–∏–¥–∫–∞ ${vipDiscountPercent}% –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞.</p>
                        <p><em>–¶–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏ –∫–∞—Ç–∞–ª–æ–≥–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.</em></p>
                    `;
                    renderCart();
                    if (window.renderCatalog) {
                        window.renderCatalog();
                    }
                    if (window.displayVipStatus) {
                        window.displayVipStatus();
                    }
                    updateCartCountDisplay();
                }, { once: true });
            }
        } else {
            vipOfferSection.style.display = 'none';
            vipOfferSection.innerHTML = '';
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏ –≤—ã–∑–æ–≤–∞ VIP –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    function updateCartTotalDisplay(total) {
        const cartTotalPriceEl = document.getElementById('cart-total-price');
        if (cartTotalPriceEl) {
            cartTotalPriceEl.textContent = `${total.toLocaleString('ru-RU', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}‚ÇΩ`;
        }
        displayVipOffer(total);
    }

    function renderCart() {
        if (!cartItemsContainer) return;
        cartItemsContainer.innerHTML = '';

        if (cart.length === 0) {
            cartItemsContainer.innerHTML = '<p class="cart-empty-message">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.</p>';
            updateCartTotalDisplay(0);
            // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ VIP-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
            const vipOfferSection = document.getElementById('vip-offer-section');
            if (vipOfferSection) {
                vipOfferSection.style.display = 'none';
                vipOfferSection.innerHTML = '';
            }
            return;
        }

        const cartTable = document.createElement('table');
        cartTable.className = 'cart-table';
        cartTable.innerHTML = `
            <thead>
                <tr>
                    <th>–¢–æ–≤–∞—Ä</th>
                    <th></th>
                    <th>–¶–µ–Ω–∞</th>
                    <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                    <th>–°—É–º–º–∞</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="4" style="text-align: right;"><strong>–ò—Ç–æ–≥–æ:</strong></td>
                    <td id="cart-total-price">0‚ÇΩ</td>
                    <td></td>
                </tr>
            </tfoot>
        `;
        const tbody = cartTable.querySelector('tbody');

        let grandTotal = 0;
        const isVipActive = localStorage.getItem('isVIP') === 'true';
        const vipDiscountRate = isVipActive ? (parseFloat(localStorage.getItem('vipDiscountPercent')) / 100) || 0.30 : 0;

        cart.forEach((item, index) => {
            let currentItemPrice = parseFloat(item.price);
            let originalItemPriceHTML = '';

            if (isVipActive) {
                const discountedPrice = currentItemPrice * (1 - vipDiscountRate);
                originalItemPriceHTML = `<span class="original-price" style="text-decoration: line-through; color: grey; font-size: 0.9em; margin-left: 5px;">${currentItemPrice.toLocaleString('ru-RU')}‚ÇΩ</span>`;
                currentItemPrice = discountedPrice;
            }
            
            const itemTotal = currentItemPrice * item.quantity;
            grandTotal += itemTotal;

            const productInStock = window.products ? window.products.find(p => p.id === item.id) : null;
            const currentStock = productInStock ? productInStock.stock : Infinity;
            
            const row = tbody.insertRow();
            row.className = 'cart-item-row';
            row.innerHTML = `
                <td class="cart-item-image-cell">
                    <img src="${item.image}" alt="${item.name}" class="cart-item-image">
                </td>
                <td class="cart-item-name">${item.name}</td>
                <td class="cart-item-price">${currentItemPrice.toLocaleString('ru-RU', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}‚ÇΩ ${originalItemPriceHTML}</td>
                <td class="cart-item-quantity">
                    <button class="quantity-btn" data-index="${index}" data-action="decrease" ${item.quantity <= 1 ? 'disabled' : ''}>-</button>
                    <span>${item.quantity}</span>
                    <button class="quantity-btn" data-index="${index}" data-action="increase" ${item.quantity >= currentStock ? 'disabled' : ''}>+</button>
                </td>
                <td class="cart-item-subtotal">${itemTotal.toLocaleString('ru-RU', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}‚ÇΩ</td>
                <td class="cart-item-remove">
                    <button class="remove-btn" data-index="${index}">–£–¥–∞–ª–∏—Ç—å</button>
                </td>
            `;
        });

        cartItemsContainer.appendChild(cartTable);
        updateCartTotalDisplay(grandTotal);

        const existingCheckoutBtn = cartItemsContainer.querySelector('.cart-checkout-btn');
        if (existingCheckoutBtn) {
            existingCheckoutBtn.remove();
        }

        if (cart.length > 0) {
            const buyBtn = document.createElement('button');
            buyBtn.textContent = '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑';
            buyBtn.className = 'cart-checkout-btn';
            buyBtn.style.marginTop = '20px';
            buyBtn.onclick = () => {
                if (cart.length > 0) {
                    const finalIsVip = localStorage.getItem('isVIP') === 'true';
                    const finalDiscountRate = finalIsVip ? (parseFloat(localStorage.getItem('vipDiscountPercent')) / 100) || 0.30 : 0;
                    let orderTotal = 0;
                    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¢–ï–ö–£–©–ï–ô –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ localStorage, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å VIP –∞–∫—Ç–∏–≤–∞—Ü–∏—é –≤ —ç—Ç–æ–º —Å–µ–∞–Ω—Å–µ
                    const currentCartState = JSON.parse(localStorage.getItem('cart')) || [];
                    currentCartState.forEach(cartItem => {
                        let priceForTotal = parseFloat(cartItem.price);
                        if (finalIsVip) {
                             priceForTotal = priceForTotal * (1 - finalDiscountRate);
                        }
                        orderTotal += priceForTotal * cartItem.quantity;
                    });

                    alert(`–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É ${orderTotal.toLocaleString('ru-RU', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}‚ÇΩ –æ—Ñ–æ—Ä–º–ª–µ–Ω.`);
                    
                    cart = [];
                    localStorage.setItem('cart', JSON.stringify(cart));
                    renderCart();
                    updateCartCountDisplay();
                } else {
                    alert('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.');
                }
            };
            // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑" –ü–û–°–õ–ï VIP –±–ª–æ–∫–∞ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –≤–∏–¥–∏–º) –∏–ª–∏ –ø–æ—Å–ª–µ —Ç–∞–±–ª–∏—Ü—ã
            const vipSection = document.getElementById('vip-offer-section');
            if (vipSection && vipSection.style.display !== 'none' && vipSection.parentNode === cartItemsContainer) {
                 vipSection.insertAdjacentElement('afterend', buyBtn);
            } else {
                 cartTable.insertAdjacentElement('afterend', buyBtn);
            }
        }

        addCartEventListeners();
        updateCartCountDisplay();
    }

    function addCartEventListeners() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –Ω–∞ cartItemsContainer –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö –∫–Ω–æ–ø–æ–∫
        cartItemsContainer.addEventListener('click', function(event) {
            const target = event.target;
            if (target.classList.contains('quantity-btn')) {
                const index = parseInt(target.dataset.index);
                const action = target.dataset.action;
                updateQuantity(index, action);
            } else if (target.classList.contains('remove-btn')) {
                const index = parseInt(target.dataset.index);
                removeFromCart(index);
            }
        });
    }

    function updateQuantity(index, action) {
        const cartItem = cart[index];
        if (!cartItem) return;

        const productInCatalog = window.products ? window.products.find(p => p.id === cartItem.id) : null;
        if (!productInCatalog) {
            const message = '–û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.';
            if (window.showToastNotification) { window.showToastNotification(message, 'error'); } else { alert(message); }
            return;
        }

        if (action === 'increase') {
            if (productInCatalog.stock <= 0) {
                const message = `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "${productInCatalog.name}". –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.`;
                if (window.showToastNotification) { window.showToastNotification(message); } else { alert(message); }
                return;
            }
            productInCatalog.stock--;
            cartItem.quantity++;
        } else if (action === 'decrease') {
            if (cartItem.quantity > 1) {
                productInCatalog.stock++;
                cartItem.quantity--;
            } else {
                return;
            }
        }

        localStorage.setItem('cart', JSON.stringify(cart));
        renderCart();
        updateCartCountDisplay();
        if (window.updateProductDisplayInCatalog) {
            window.updateProductDisplayInCatalog(cartItem.id);
        }
    }

    window.removeFromCart = function(index) {
        const removedItem = cart[index];
        if (!removedItem) return;

        const productInCatalog = window.products ? window.products.find(p => p.id === removedItem.id) : null;
        if (productInCatalog) {
            productInCatalog.stock += removedItem.quantity;
        }
        cart.splice(index, 1);
        localStorage.setItem('cart', JSON.stringify(cart));
        renderCart();
        updateCartCountDisplay();
        if (productInCatalog && window.updateProductDisplayInCatalog) {
            window.updateProductDisplayInCatalog(removedItem.id);
        }
    };

    renderCart();
    updateCartCountDisplay(); // Initial call
});
